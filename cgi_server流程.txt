1.创建listenfd监听套接字
2.调用processpool<cgi_conn>::create（listenfd）
创建pool对象,默认创建8个子进程
	2.1.调用构造函数，实例化processpool单例
	2.2.构造函数初始化processpool对象的
	m_listenfd,m_process_number,m_idx,m_stop
	成员属性
	2.3.new process[process_number]数组并赋值给
	m_sub_process成员属性
	2.4.for(process_number)循环，在for循环中：
		2.4.1.socketpair初始化每个m_sub_process[i]的m_pipefd成员
		2.4.2.调用fork,并将子进程id初始化m_sub_process[i]的m_pid成员
		2.4.3.对父进程，close m_sub_process数组中每个对象的m_pipefd[1]
		即，父进程保持对每个子进程的m_pipefd[0]打开
		2.4.4.对与子进程，将processpool对象对应的m_idx改为对应的i值，
		且关闭对应的m_sub_process[i]中的m_pipefd[0],即保持1打开
/*此时一共存在8+1个进程，每个进程有一个processpool对象，父进程m_idx为-1，子进程
为对应的数组下标，操做其m_sub_process[],数组时，也是用对应的下标位的元素与父进程
通信*/	
3.判断pool存在，调用pool的run方法(每个进程都调用对应的run方法，同理，对pool存在的
判断也是每个进程都进行判断)
/*========================run_child===========================*/	
	3.1.调用setup_sig_pipe函数，该函数:
		3.1.1.调用epoll_create初始化该进程对象的m_epollfd成员
		3.1.2.socketpair 初始化该进程全局变量sig_popefd
		3.1.3.将sig_pipefd[1]设为非阻塞，并将sig_pipefd[0]加入m_epollfd中		
		3.1.4.设置对应的信号处理函数sig_handler，sig_handler
		将对应的信号写入sig_pipefd[1]
	3.2.将对应该子进程的m_pipefd[1]加入m_epollfd
	3.3.new USER_PER_PRECESS个user对象(cgi_conn)
	3.4.while(!m_stop)
		3.4.1.epoll_wait
			3.4.1.1.与父进程通信管道可读，accept(m_listenfd),同时将连接
			的套接字加入m_epollfd,调用users[connfd].init()
				3.4.1.1.1.cgi_conn 的 init方法初始化cig_conn对象的m_epollfd,m_sockfd,m_address,m_read.idx对象
			3.4.1.2.子进程的信号管道可读，接受数据到信号数组，并轮询判断，若是SIGTERM,SIGINT则m_stop为true，结束本进程，
			若信号为SIGCHLD,则waitpid(-1)等待任意一个子进程退出(该子进程是cgi_conn.process 执行fork，execl)
			3.4.1.3.若其他条件，则客户的请求到来，调用对应的users[sockfd].process
				3.4.1.3.1.process while(true)
				3.4.1.3.2.
		3.4.2.子进程退出时，delete users,close(pipefd)(与父进程通信那个管道),close(m_epollfd)
/*==============================run_parent=====================*/
	3.1.调用setup_sig_pipe函数，该函数:
		3.1.1.调用epoll_create初始化该进程对象的m_epollfd成员
		3.1.2.socketpair 初始化该进程全局变量sig_popefd
		3.1.3.将sig_pipefd[1]设为非阻塞，并将sig_pipefd[0]加入m_epollfd中		
		3.1.4.设置对应的信号处理函数sig_handler，sig_handler
		将对应的信号写入sig_pipefd[1]
	3.2.将m_listenfd加入m_epollfd
	3.3.while(!m_stop)
		3.3.1.epoll_wait
			3.3.1.1.对应m_listenfd可读，则
				3.3.1.1.1.Round Robin方式分配一个子进程（向子进程一字节的数据）
			3.3.1.2.父进程信号管道可读：接受数据到信号数组，并轮询判断，若是SIGTERM,SIGINT则想所有子进程kill(pid,SIGTERM)
			等待他们全部退出，若信号为SIGCHLD,则waitpid(-1)，如果进程池中第i个子进程退出了，则主进程关闭 相应的通信管道，并设置相应的m_pid为-1，
			以标记该子进程已经退出，如果所有子进程都已经退出，则父进程也退出
	3.4.父进程结束前，close m_epollfd





4.delete每个进程对应的 pool对象
5.关闭listenfd套接字